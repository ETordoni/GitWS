---
title: "Git(Hub) for ecologists"
author: "Diego P.F. Trindade"
date: "today"
format: 
  revealjs:
    css: "adjust.css"
    width: 1600
    height: 900
    slide-number: false
    chalkboard: true
    theme: ["dark", "styles.scss"]
    echo: true
    multiplex: true
    code-link: true
    code-copy: true
    auto-play-media: false
    preview-links: auto
    title-slide-attributes:
      #data-background-color: "#447099"
      data-background-image: "./images/ut_logo.svg, ./images/macroeco_logo.png"
      data-background-size: 100px, 200px, cover
      data-background-position: "2% 2%, 98% 5%, center"
editor: source
---

# [Laelatu meeting: <br>Macroecological data and data science]{style="color:#C8F526;font-size:86px"} {background-image="./images/springWG.jpeg" background-opacity="0.3"}



## Before we start..

### A brief checklist:



* Everyone has a github account

*  RStudio and Git are connected

    + If not:


::: {style="font-size:54px"}

```
#install.packages("usethis")

usethis::use_git_config(user.name = "yourusername", user.email = "youremail@example.xx")

usethis::create_github_token()

#Copy your PAT

#Run the following line and paste it:

gitcreds::gitcreds_set()

```
::: 


## Not an advanced course

![](./images/gitmeme.png){.absolute top="100" left="450" width="650" height="1800"}


## Git(Hub) in a nutshell {background-image="./images/git-commit.png" background-opacity="0.15"}

::: columns
::: {.column width="10%"}
![](https://git-scm.com/images/logos/downloads/Git-Logo-1788C.svg){.absolute top="180" left="0" width="200" height="250"}

![](./images/github-mark-white.png){.absolute bottom="250" left="40" width="150" height="150"}
:::

::: {.column width="7%"}
:::

::: {.column width="65%"}
<br><br><br>

Git is a version control software that **tracks changes** to your files over time.

<br><br><br>

Github is a website for your git-versioned files.
:::

::: {.column width="15%"}
::: footer
::: {style="text-align:right;"}
[Illustration: Alisson Horst](https://allisonhorst.com/git-github)
:::
:::
:::
:::


## I use R + DropBox, why should I care?

::: columns
::: {.column width="20%"}
:::

::: {.column width="80%"}
<br><br> <iframe src="https://giphy.com/embed/pPhyAv5t9V8djyRFJH" width="880" height="550" frameBorder="1" class="giphy-embed" allowFullScreen></iframe>

<p><a href="https://giphy.com/gifs/wtf-obama-wth-pPhyAv5t9V8djyRFJH"></a></p>
:::
:::

## Something like this can happen

![](./images/files-comics.gif){.absolute top="200" left="350" width="850" height="600"}

## Veryfinal_Version2

<br>
<br>

![](./images/phd-comics-version-control.png){fig-align="center"}



# [Reproducibility and Version Control]{style="color:yellow;"} {background-image="./images/reprod.jpeg" background-opacity="0.2"}

::: footer
::: {style="text-align:right;"}
[Illustration: Robert Neubecker](https://www.science.org/doi/10.1126/science.354.6308.142)
:::
:::

## How does Git work?

<br>
<br>

![](./images/basic-git.jpeg){fig-align="center"}

## How does Git work?


<br>
<br>

![](./images/versions.png){fig-align="center"}

------------------------------------------------------------------------

{{< video https://www.youtube.com/watch?v=s3JldKoA0zw&t=4s&ab_channel=HomerWhite start="4" width="100%" height="100%" >}}


## Why using Git?

- A backup of your work!

- Keep track of all changes, and potentially go back in time if necessary

- Easy to share your work with others (papers, analyses, functions, packages);

- Work in collaboration (branches, issues, pull requests).


## Why Git + RStudio?

-   Most ecologists use R;

-   RStudio has an easy and well-connected interface with GitHub;

-   Repository/Projects;

-   GitHub act as a "preprint" for R packages or functions.


## GitHub potential drawbacks

- Allows files up to 100mb;

- Simultaneous changes can be problematic;

:::{.notes}

not as Google Drive documents

:::


# [Let's make a quick tour]{style="color:#C8F526;"} {background-image="./images/workflow.png" background-opacity="0.3"}

::: footer
::: {style="text-align:right;"}
[Illustration: Alisson Horst](https://allisonhorst.com/git-github)
:::
:::

# Git can be used by yourself or as a team


## Introvert git user

-   You manage your projects alone (on one or multiple machines);

-   You commit, push and pull your own changes (keep track of your changes);

-   It is still fun and safe!


# But.. what you mean by commit, push, pull?!?


::: {.notes}

-   Check some old projects

:::

## Let's see how it works in practice


-   Creating a new repository;


-   Connecting this repository to RStudio


## Let's see how it works in practice


-  From GitHub to RStudio

-  From local computer to GitHub

-  Using command line

## Let's see how it works in practice


-  [From GitHub to RStudio]{style="color:#F4BA02;"}

-  From local computer to GitHub

-  Using command line


## From GitHub to RStudio

-   Super easy, if both are connected


## 1st task - let's create our first test project

- Clone from GitHub to RStudio

::: {.notes}

- README, gitignore,

:::


## From command line

<br>

:::{style="font-size:68px;"}


```
create a repository on github

go to the terminal and choose your folder (cd path)

git init
git remote add origin <repolink>
git add .
git commit -m "first commit"
git push -u origin main

```

:::



# First GitHub's power - Version control


## Git pannel anatomy

- [Stage]{style="color:#add8e6;"}: add changes to be commited (file edits, additions, deletions, etc.);


- [Commit]{style="color:#F4BA02;"}: Save these changes locally. 


:::{.callout-tip}

::: {style="font-size:48px"}

**Always write a meaningful message**

:::

:::


- [Pull]{style=theme-yellow}: Get any new changes made on the GitHub repo, either by you on another machine or your collaborators. 



- [Push]{style="color:green;"}: Push any (committed) local changes to the GitHub repo;

:::

## Git pannel anatomy

<br>

![](./images/git_tab.png){fig-align="center"}

::: footer
::: {style="text-align:right;"}
[Image: Olivier Gimenez](https://oliviergimenez.github.io/reproducible-science-workshop/slides/1_github.html#13)
:::
:::


## Version control


- Create some fake scripts, edit and save them, commit and push

- Repeat this process and check what happens


## Someone created a nice repository and I wanna use it

- Public GitHub repositories can also be cloned

- A nice strategy to learn new things

- Very nice when reviewing papers that use GitHub!

## 2nd task - Cloning repositories

- Let's try to Clone a random nice project on GitHub.

- Now, make any change to this project, commit and try to push it

::: fragment

::: {style="font-size:48px"}

::: {.callout-warning}

I hope that a wild error appeared!

::: 
::: 
::: 

## Clone and Fork

- Clone: Cloning creates a local version of the original repository;

- Fork: creates a copy of the repository on your GitHub (which you can then clone)

::: fragment

- Let's now try to first fork and then clone the same repository

:::

## 3rd task - Create a project you are currently working on

- Create a repository on GitHub;

- Clone it and make a new project in RStudio

- Copy and paste your folders/scripts into this new projects' folder


::: fragment

::: {.callout-tip}

- If you have large data files:

- You can try using .RData, .RDS or zip files instead (if they don't exceed 100mb);

- Or even, you can use large files locally and .gitignore them!

:::

:::

## Collaborative git

-   The most exciting but challenging one

::: fragment
#### "Always PULL first!"
:::

![](./images/GitHub-diagram.jpeg){fig-align="center"}


::: {.notes}
- Workgroup example
:::

## Issues can/will appear! Merge conflicts!


<iframe src="https://giphy.com/embed/MCZ39lz83o5lC" width="1080" height="850" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/MCZ39lz83o5lC"></a></p>



## Collaborative git

-   You can use/manage your projects using different computers/collaborators

-   Push/Pull issues

## 4th task - dealing with some issues

<br>

### 1st issue:

<br>

- Go to GitHub, open your test project and invite a collaborator (person next to you);

- **ask him/her to change a file and push it.**

- Now, don't pull the changes and try to make new changes to the same file and commit/push it yourself.

::: fragment

::: {style="font-size:48px"}

::: {.callout-warning}

I hope that a wild error appeared!

::: 
::: 
::: 


## Why?


<br>

::: {.callout-important}

::: {style="font-size:42px"}

**Always PULL first!**
:::


:::


## 4th task - dealing with some issues

<br>

### 2nd issue (still an easy one):

<br>

- **ask your collaborator to change a file and "forget" to commit or push it**

- Change yourself the same file (either add or remove anything), commit and push it.

- Ask your collaborator to commit and push his/her changes.


## 4th task - dealing with some issues

### 3rd issue (quite annoying one):

- **ask your collaborator to change a file, commit this change and "forget" to push it**

- Pull the changes as usual (nothing will happen, everything seems fine)

- Change the same file yourself (either add or remove anything), commit and push it.

- Ask your collaborator to push his/her changes after that.

## Most issues can be solved with "Pull"

- Sometimes not though

- [Oh Shit Git!](https://ohshitgit.com/), [StackOverflow](https://stackoverflow.com/) and [ChatGPT](https://openai.com/blog/chatgpt) are our friends


# Git allow us to test new things safely: [Branches!]{style="color:red;"}


## Let's try some branch approaches


- Branches can be viewed as experiments;

- Useful when working in collaboration but also alone;


![](./images/git-branches.png){fig-align="center"}

## Working with branches alone

- Pull the changes (no errors, I hope);

- Create a new branch;

- Work on this branch

- Push changes and check your repository on GitHub

- New Feature: [Pull request]{style="color:red;"}


## Working with branches as a team



## Issues + Pull request

- This is how data science is being pushed forward

- Great when working as a team

- Let's try to create some issues and solve them

# That's it! The basic to start using git is done


# Additional tips 

## Simple rules/commands to avoid summoning Git demons

::: fragment
#### "Always PULL first!"
:::

-   git stash

-   git HEAD\~soft

-   git status


## Less crucial but still useful tips


- How to go back in time?


- git revert or on GitHub page using SHA (<>)




## Group task

- 5 groups of 4

- 5 different repositories/datasets



## 1st Group task

- Let's explore the data, make changes, commit and push

- Each person changes a specific script (no overlap!)

- You can either communicate saying when you pushed so the other person can pull the changes

- You can also choose not saying anything. Your teammates will receive an error, but since you are working in different files they just need to pull the changes and everything will be fine;

- All collaborators, change, commit and push their changes and resolve the conflicts (which will be solved simply by pulling)



## 2^nd^ Group task

- Let's continue making changes but now using branches.

- Each person creates a branch with his/her name

- Let's keep working each person in a different script

- Make changes and pull requests



## 3^rd^ Group task

- Let's try to create some conflict and learn how to solve them.

- Now, two persons will work on the same script

- To make things less complicated, each person changes a simple thing (e.g. the label of a plot)

- They push and try to pull request their changes (and solve the conflicts that will appear)


## 4^th^ Group task

- Let's create issues and ask collaborators to solve them.

- Remember to use the # linked to the issue









## Sources

-   How to connect Git and RStudio: [Happy Git With R](https://happygitwithr.com/index.html)

-   How to solve the most common issues: [Oh Shit Git!](https://ohshitgit.com/)

-   Important notes: [click here](https://raw.githack.com/uo-ec607/lectures/master/02-git/02-Git.html#1)

-   How to collaborate on Rstudio with Git: [click here](https://jtr13.github.io/cc21/collaborating-on-rstudio-with-github.html)
